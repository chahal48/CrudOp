@model IEnumerable<CrudOp.Models.ContactModel>
@{
    ViewData["Title"] = "Home Page";
}
<style>
    select.form-control {
        display: inline;
        width: 200px;
        margin-left: 25px;
    }
</style>
<div class="form-group">
    <div class="row">
        <div class="col-md-10">
        </div>
        <div class="col-md-2">
            @Html.ActionLink("Add New Contact", "AddContact", "Home", "", new { @class = "btn btn-outline-dark" })
        </div>
    </div>
</div>
<hr />
<div class="container">
    <div class="category-filter">
        <select id="categoryFilter" class="form-control form-select">
            <option value="">Show All</option>
            <option value="Client">Client</option>
            <option value="Vendor">Vendor</option>
        </select>
    </div>

    <table class="display" id="filterTable">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FullName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.emailAddr)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Profession)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Company)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Category)
                </th>
                <th class="text-center">Manage</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                @Html.HiddenFor(model => item.ContactID)
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FullName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.emailAddr)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Profession)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Company)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category)
                    </td>
                    <td align="center" colspan="2">
                        @Html.ActionLink("Edit", "EditContactDetails", new { id = item.ContactID }, new { @class = "btn btn-outline-success" }) &nbsp;
                        @Html.ActionLink("Details", "ContactDetails", new { id = item.ContactID }, new { @class = "btn btn-outline-info" }) &nbsp;
                        @Html.ActionLink("Delete", "DeleteContact", new { id = item.ContactID }, new { onclick = "return confirm('Are you sure you want to delete this contact?');", @class = "btn btn-outline-danger" })
                    </td>
                </tr>

            }
        </tbody>
    </table>
</div>
<script src="~/lib/jquery.min.js"></script>
<script src="~/lib/jquery.datatables.min.js"></script>
@section scripts{
    <script>
        $("document").ready(function () {
            $("#filterTable").dataTable({
                "searching": true,
                //order: [[3, 'desc']],  for shorting specific column
                order: [], // for disable initial shorting
                pageLength: 10, // for start page length
                lengthMenu: [[5, 10, 25, -1], [5, 10, 25, 'All']] // for giving specific row count
            });
            //Get a reference to the new datatable
            var table = $('#filterTable').DataTable();
            //Take the category filter drop down and append it to the datatables_filter div.
            //You can use this same idea to move the filter anywhere withing the datatable that you want.
            $("#filterTable_filter.dataTables_filter").append($("#categoryFilter"));

            //Get the column index for the Category column to be used in the method below ($.fn.dataTable.ext.search.push)
            //This tells datatables what column to filter on when a user selects a value from the dropdown.
            //It's important that the text used here (Category) is the same for used in the header of the column to filter
            var categoryIndex = 4; // Index of field to Filter

            //Use the built in datatables API to filter the existing rows by the Category column
            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var selectedItem = $('#categoryFilter').val()
                    var category = data[categoryIndex];
                    if (selectedItem === "" || category.includes(selectedItem)) {
                        return true;
                    }
                    return false;
                }
            );
            //Set the change event for the Category Filter dropdown to redraw the datatable each time
            //a user selects a new filter.
            $("#categoryFilter").change(function (e) {
                table.draw();
            });
            table.draw();
        });
    </script>
}




